// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EthernetShopContext))]
    partial class EthernetShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Buy", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("Purchase_id");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("Buyer_id");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Delivery_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase_date");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("Seller_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('InProcess')");

                    b.HasKey("PurchaseId")
                        .HasName("PK_Покупки");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("Domain.Models.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("Buyer_id");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Home_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Passport")
                        .HasColumnType("int");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("BuyerId")
                        .HasName("PK_Покупатели");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("QuanityInStock")
                        .HasColumnType("int")
                        .HasColumnName("Quanity_in_stock");

                    b.HasKey("ProductId")
                        .HasName("PK_Товар");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentCategotyId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_categoty_id");

                    b.HasKey("CategoryId")
                        .HasName("PK_Категории");

                    b.HasIndex("ParentCategotyId");

                    b.ToTable("Product_categories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PurchaseContent", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("Product_id");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("Purchase_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "PurchaseId")
                        .HasName("PK_Содержание");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Purchase_content", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("Seller_id");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Home_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Job_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("Phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("SellerId")
                        .HasName("PK_Продавцы");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Domain.Models.Buy", b =>
                {
                    b.HasOne("Domain.Models.Buyer", "Buyer")
                        .WithMany("Buys")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Покупки_Покупатель");

                    b.HasOne("Domain.Models.Seller", "Seller")
                        .WithMany("Buys")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Покупки_Продавец");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Категории_Товар");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.HasOne("Domain.Models.ProductCategory", "ParentCategoty")
                        .WithMany("InverseParentCategoty")
                        .HasForeignKey("ParentCategotyId")
                        .HasConstraintName("FK_Product_categories_Product_categories");

                    b.Navigation("ParentCategoty");
                });

            modelBuilder.Entity("Domain.Models.PurchaseContent", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("PurchaseContents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Содержание_Товар");

                    b.HasOne("Domain.Models.Buy", "Purchase")
                        .WithMany("PurchaseContents")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Содержимое_Покупки");

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Models.Buy", b =>
                {
                    b.Navigation("PurchaseContents");
                });

            modelBuilder.Entity("Domain.Models.Buyer", b =>
                {
                    b.Navigation("Buys");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("PurchaseContents");
                });

            modelBuilder.Entity("Domain.Models.ProductCategory", b =>
                {
                    b.Navigation("InverseParentCategoty");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.Seller", b =>
                {
                    b.Navigation("Buys");
                });
#pragma warning restore 612, 618
        }
    }
}
